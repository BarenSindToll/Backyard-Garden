{
  "version": 3,
  "sources": ["../../react-use-image/src/index.tsx"],
  "sourcesContent": ["import { useEffect, useRef, useState } from 'react';\n\n// interface Window extends EventTarget {\ndeclare interface Window extends EventTarget {\n  readonly window: Window & typeof globalThis;\n  Image: {\n    prototype: HTMLImageElement;\n    new (): HTMLImageElement;\n  };\n}\n\ninterface SizedTarget {\n  width: number;\n  height: number;\n}\n\n// type WindowProps = React.HTMLProps<HTMLElement>;\n\n// interface WindowComponent extends React.StatelessComponent<WindowProps> {\n//     (props: WindowProps): React.ReactElement<HTMLElement>;\n// }\n\nconst useImage = (src: string) => {\n  const ready = useRef(true);\n  const [loaded, setLoaded] = useState(false);\n  const [failed, setFailed] = useState(false);\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0,\n  });\n\n  useEffect(() => {\n    const win: Window = window;\n    const { Image } = win;\n\n    if (!src || !Image) {\n      return;\n    }\n\n    const image = new Image();\n\n    function isSizedTarget(t: any): t is SizedTarget {\n      return t && t.width !== undefined && t.height !== undefined;\n    }\n\n    image.onload = event => {\n      if (ready.current) {\n        if (isSizedTarget(event.target)) {\n          const { width, height } = event.target;\n          setLoaded(true);\n          setDimensions({ width, height });\n        }\n      }\n    };\n\n    image.onerror = () => {\n      if (ready.current) {\n        setLoaded(false);\n        setFailed(true);\n      }\n    };\n\n    image.src = src;\n  }, [src]);\n\n  useEffect(() => {\n    return () => {\n      ready.current = false;\n    };\n  }, []);\n\n  return { loaded, failed, dimensions };\n};\n\nexport default useImage;\n"],
  "mappings": ";;;;;;;;;AAsBA,IAAMA,WAAW,SAAXA,UAAYC,KAAD;AACf,MAAMC,YAAQC,qBAAO,IAAD;sBACQC,uBAAS,KAAD,GAA7BC,SAAAA,UAAAA,CAAAA,GAAQC,YAAAA,UAAAA,CAAAA;uBACaF,uBAAS,KAAD,GAA7BG,SAAAA,WAAAA,CAAAA,GAAQC,YAAAA,WAAAA,CAAAA;uBACqBJ,uBAAS;IAC3CK,OAAO;IACPC,QAAQ;EAFmC,CAAD,GAArCC,aAAAA,WAAAA,CAAAA,GAAYC,gBAAAA,WAAAA,CAAAA;AAKnBC,8BAAU,WAAA;AACR,QAAMC,MAAcC;QACZC,QAAUF,IAAVE;AAER,QAAI,CAACf,OAAO,CAACe,OAAO;AAClB;IACD;AAED,QAAMC,QAAQ,IAAID,MAAJ;AAEd,aAASE,cAAcC,GAAvB;AACE,aAAOA,KAAKA,EAAEV,UAAUW,UAAaD,EAAET,WAAWU;IACnD;AAEDH,UAAMI,SAAS,SAAAC,OAAK;AAClB,UAAIpB,MAAMqB,SAAS;AACjB,YAAIL,cAAcI,MAAME,MAAP,GAAgB;AAAA,cAAA,gBACLF,MAAME,QAAxBf,QADuB,cACvBA,OAAOC,SADgB,cAChBA;AACfJ,oBAAU,IAAD;AACTM,wBAAc;YAAEH;YAAOC;UAAT,CAAD;QACd;MACF;IACF;AAEDO,UAAMQ,UAAU,WAAA;AACd,UAAIvB,MAAMqB,SAAS;AACjBjB,kBAAU,KAAD;AACTE,kBAAU,IAAD;MACV;IACF;AAEDS,UAAMhB,MAAMA;EACb,GAAE,CAACA,GAAD,CAhCM;AAkCTY,8BAAU,WAAA;AACR,WAAO,WAAA;AACLX,YAAMqB,UAAU;IACjB;EACF,GAAE,CAAA,CAJM;AAMT,SAAO;IAAElB;IAAQE;IAAQI;EAAlB;AACR;;",
  "names": ["useImage", "src", "ready", "useRef", "useState", "loaded", "setLoaded", "failed", "setFailed", "width", "height", "dimensions", "setDimensions", "useEffect", "win", "window", "Image", "image", "isSizedTarget", "t", "undefined", "onload", "event", "current", "target", "onerror"]
}
